@use 'sass:map';

@use 'common/var' as *;
@use 'mixins/mixins' as *;
@use 'mixins/var' as *;
@use 'mixins/_button';
@use 'mixins/utils' as *;

$checkbox-height: () !default;
$checkbox-height: map.merge($common-component-size, $checkbox-height);

$checkbox-bordered-input-height: () !default;
$checkbox-bordered-input-height: map.merge(
  (
    'large': 14px,
    'default': 12px,
    'small': 12px,
  ),
  $checkbox-bordered-input-height
);

$checkbox-font-size: () !default;
$checkbox-font-size: map.merge(
  (
    'large': 14px,
    'small': 12px,
  ),
  $checkbox-font-size
);

$checkbox-bordered-input-width: () !default;
$checkbox-bordered-input-width: map.merge(
  $checkbox-bordered-input-height,
  $checkbox-bordered-input-width
);

@include b(checkbox) {
  color: map.get($checkbox, 'text-color');
  font-weight: map.get($checkbox, 'font-weight');
  font-size: map.get($checkbox, 'font-size');
  position: relative;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  white-space: nowrap;
  user-select: none;
  margin-right: 30px;
  height: map.get($checkbox-height, 'default');

  @include when(bordered) {
    padding: 0 map.get($checkbox-bordered-padding-right, 'default')-$border-width
      0 map.get($checkbox-bordered-padding-left, 'default')-$border-width;
    border-radius: getCssVar('border-radius-base');
    border: getCssVar('border');
    box-sizing: border-box;

    &.is-checked {
      border-color: getCssVar('color', 'primary');
    }

    &.is-disabled {
      border-color: getCssVar('border-color', 'light');
      cursor: not-allowed;
    }

    @each $size in (large, small) {
      &.#{$namespace}-checkbox--#{$size} {
        padding: 0
          map.get($checkbox-bordered-padding-right, $size)-$border-width
          0
          map.get($checkbox-bordered-padding-left, $size)-$border-width;

        border-radius: map.get($button-border-radius, $size);

        .#{$namespace}-checkbox__label {
          font-size: map.get($button-font-size, $size);
        }

        .#{$namespace}-checkbox__inner {
          height: map.get($checkbox-bordered-input-height, $size);
          width: map.get($checkbox-bordered-input-width, $size);
        }
      }
    }

    &.#{$namespace}-checkbox--small {
      .#{$namespace}-checkbox__inner {
        &::after {
          height: 6px;
          width: 2px;
        }
      }
    }
  }

  input:focus-visible {
    & + .#{$namespace}-checkbox__inner {
      outline: 2px solid map.get($checkbox, 'input-border-color-hover');
      outline-offset: 1px;
      border-radius: map.get($checkbox, 'border-radius');
    }
  }

  @include e(input) {
    white-space: nowrap;
    cursor: pointer;
    outline: none;
    display: inline-flex;
    position: relative;

    @include when(disabled) {
      .#{$namespace}-checkbox__inner {
        background-color: map.get($checkbox, 'input-fill-disabled');
        border-color: map.get($checkbox, 'border-color-disabled');
        cursor: not-allowed;

        &::after {
          cursor: not-allowed;
          border-color: map.get($checkbox, 'icon-color-disabled');
        }

        & + .#{$namespace}-checkbox__label {
          cursor: not-allowed;
        }
      }

      &.is-checked {
        .#{$namespace}-checkbox__inner {
          background-color: map.get($checkbox, 'input-fill-disabled-checked');
          border-color: map.get($checkbox, 'input-border-color-disabled');

          &::after {
            border-color: map.get($checkbox, 'icon-color-disabled-checked');
          }
        }
      }

      &.is-indeterminate {
        .#{$namespace}-checkbox__inner {
          background-color: map.get($checkbox, 'input-fill-disabled-checked');
          border-color: map.get($checkbox, 'input-fill-disabled-checked');

          &::before {
            background-color: map.get($checkbox, 'icon-color-disabled-checked');
            border-color: map.get($checkbox, 'icon-color-disabled-checked');
          }
        }
      }

      & + span.#{$namespace}-checkbox__label {
        color: getCssVar('text-color', 'disabled');
        cursor: not-allowed;
      }
    }

    @include when(checked) {
      .#{$namespace}-checkbox__inner {
        background-color: map.get($checkbox, 'bg-color-checked');
        border-color: map.get($checkbox, 'input-border-color-checked');

        &::after {
          transform: rotate(45deg) scaleY(1);
        }
      }

      & + .#{$namespace}-checkbox__label {
        color: map.get($checkbox, 'text-color-checked');
      }
    }
    @include when(focus) {
      // Visually distinguish when focus
      &:not(.is-checked) {
        .#{$namespace}-checkbox__original:not(:focus-visible) {
          border-color: map.get($checkbox, 'input-border-color-hover');
        }
      }
    }
    @include when(indeterminate) {
      .#{$namespace}-checkbox__inner {
        background-color: map.get($checkbox, 'bg-color-checked');
        border-color: map.get($checkbox, 'input-border-color-checked');

        &::before {
          content: '';
          position: absolute;
          display: block;
          background-color: map.get($checkbox, 'icon-color-checked');
          height: 2px;
          transform: scale(0.5);
          left: 0;
          right: 0;
          top: 5px;
        }

        &::after {
          display: none;
        }
      }
    }
  }
  @include e(inner) {
    display: inline-block;
    position: relative;
    border: map.get($checkbox, 'input-border');
    border-radius: map.get($checkbox, 'border-radius');
    box-sizing: border-box;
    width: map.get($checkbox, 'input-width');
    height: map.get($checkbox, 'input-height');
    background-color: map.get($checkbox, 'bg-color');
    z-index: getCssVar('index-normal');
    transition: border-color 0.25s cubic-bezier(0.71, -0.46, 0.29, 1.46),
      background-color 0.25s cubic-bezier(0.71, -0.46, 0.29, 1.46),
      outline 0.25s cubic-bezier(0.71, -0.46, 0.29, 1.46);

    &:hover {
      border-color: map.get($checkbox, 'input-border-color-hover');
    }

    &::after {
      box-sizing: content-box;
      content: '';
      border: 2px solid map.get($checkbox, 'icon-color-checked');
      border-left: 0;
      border-top: 0;
      height: 50%;
      left: 30%;
      position: absolute;
      top: 10%;
      transform: rotate(45deg) scaleY(0);
      width: 20%;
      transition: transform 0.15s ease-in 0.05s;
      transform-origin: center;
    }
  }

  @include e(original) {
    opacity: 0;
    outline: none;
    position: absolute;
    margin: 0;
    width: 0;
    height: 0;
    z-index: -1;
  }

  @include e(label) {
    display: inline-block;
    padding-left: 8px;
    line-height: 1;
    font-size: map.get($checkbox, 'font-size');
  }

  @each $size in (large, small) {
    &.#{$namespace}-checkbox--#{$size} {
      height: map.get($checkbox-height, $size);
      @include e(label) {
        font-size: map.get($checkbox-font-size, $size);
      }
      @include e(inner) {
        width: map.get($checkbox-font-size, $size);
        height: map.get($checkbox-font-size, $size);
      }
    }
  }

  &.#{$namespace}-checkbox--small {
    @include e(input) {
      @include when(indeterminate) {
        @include e(inner) {
          &::before {
            top: 4px;
          }
        }
      }
    }
    @include e(inner) {
      &::after {
        width: 2px;
        height: 6px;
      }
    }
  }

  &:last-of-type {
    margin-right: 0;
  }
}
